(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-c1fad08e"],{"0632":function(e,t,r){"use strict";var a=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[r("h3",[e._v(e._s(e.subtitle))])])},i=[],v={name:"subtitle",props:["subtitle"]},n=v,s=r("2877"),b=Object(s["a"])(n,a,i,!1,null,"45a9ab29",null);t["a"]=b.exports},"100c":function(e,t,r){"use strict";var a=r("416f"),i=r.n(a);i.a},"416f":function(e,t,r){},"44ed":function(e,t,r){"use strict";var a=r("61d0"),i=r.n(a);i.a},"4bb5":function(e,t,r){"use strict";r.r(t);var a=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[r("main-title",{attrs:{mainTitle:e.mainTitle}}),r("subtitle",{attrs:{subtitle:e.subtitle1}}),e._m(0),e._m(1),r("subtitle",{attrs:{subtitle:e.subtitle2}}),e._m(2),r("subtitle",{attrs:{subtitle:e.subtitle3}}),e._m(3),r("subtitle",{attrs:{subtitle:e.subtitle4}}),e._m(4)],1)},i=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e._v(" 反正刚开始想了解源码的时候，js基础很差，对一些es6的语法还不怎么掌握"),r("br"),e._v(" 所以但凡你想了解源码，先得对JS非常熟练，了解闭包，了解各种静态方法"),r("br"),e._v(" 类似Object.defineProperty(),Array的push、pop、splice等等"),r("br"),e._v(" 然后你可能想看源码了，我建议先去找一些大牛的博客，通过别人的理解先熟"),r("br"),e._v(" 悉大概一个过程。"),r("br"),e._v(" 进阶后你可以去github上下载源码，自己一行一行去解读这个过程。 ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("div",[e._v(' 先贴一张官方的依赖收集图片 "data-touch"，在你阅读完这片小文章后'),a("br"),e._v(" 希望你能对这张图有个大概对了解,另外建议配合源码食用 ")]),a("img",{attrs:{src:r("fc19"),alt:""}})])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e._v(" 首先initData函数，是在initState()中调用的，它在调用是在vue周期是在"),r("br"),e._v(" beforeCreate()-created()之间 它主要干了两件事: "),r("br"),e._v(" 1.将data对象或是返回的对象中的每个属性挂载到了vue实例上"),r("br"),e._v(" 2.调用observe()函数，那么这步就是将对象中的每个属性变成了响应式的"),r("br")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e._v(" 事实上，第一步还有这些过程。"),r("br"),e._v(" 1. 保存data，如果data是函数则调用赋值给data（建议后期仔细看下getData())，如果是对象则直接赋值 "),r("br"),e._v(" 2. 遍历data中对key，判断每个key都唯一（与props和methods做比较) "),r("br"),e._v(" 3. 调用proxy(),结果就是读写vue.a,就是读写vm._data.a ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[e._v(" 将data中的每个属性变为响应式的！！！"),a("br"),e._v(" 它的核心就是observe()函数，整一个源代码目录中，你可以看到关于observe相关的"),a("br"),e._v(" 有整整一个文件夹，就可以知道它的重要性了"),a("br"),e._v(" observe()函数主要就干了一件事生成一个observe对象，new Observer(value) 这个value=>就是data "),a("br"),a("strong",[e._v("接下来new Observer()真的很重要，建议多次阅读")]),e._v(" data后面用value称号，事实上源码也是这么命名的这个形参的"),a("br"),e._v(" 1.首先是对observer对象的构建 "),a("br"),e._v(" { "),a("br"),e._v(" value: this.value 也就是为什么你console $data时，会出现无限嵌套 "),a("br"),e._v(" dep : new Dep() 这个真的很重要，和$set有关，是手动触发视图更新的关键 "),a("br"),e._v(" vmCount : 0 "),a("br"),e._v(" } "),a("br"),e._v(" 最后就是把自身挂载到value上 def(value, '__ob__', this) "),a("br"),e._v(" value可数组可对象，主要讲下对象，数组可以自己往下读 "),a("br"),e._v(" 随后就是调用this.walk(value) "),a("br"),e._v(" 这个函数很简单，就是遍历每个key，然后调用difineReactive() "),a("br"),e._v(" 下面就是关键了，注入defineReactive的两个形参先记下一份是obj也就是value，一个是key "),a("br"),e._v(" 函数第一个语句 就是 "),a("strong",[e._v("const dep = new Dep()")]),e._v(" 你可以看下上面也有个dep，这里先不解释 "),a("br"),e._v(" 略过一些代码，往下看，就到了Object.difineProperty() "),a("br"),a("img",{attrs:{src:r("520d"),alt:""}}),a("div",[e._v(" 注意这一行代码 let childOb = !shallow && observe(val) "),a("br"),e._v(" 如果这个key对应的val是个对象，那么childOb就会指向这个val的__ob__ "),a("br"),e._v(" 先知道这点就行了，等会再来看这里 "),a("br"),e._v(" 然后就是通过Object.difineProperty()，拦截对这个属性对读写 "),a("br"),e._v(" 但其实上，但凡有个watcher对象读这个属性watcher.get，就会进入 "),a("br"),e._v(" dep.depend这个分支，而且如果这个属性的val是个对象，这个watcher "),a("br"),e._v(" 还会收入这个对象的observer的dep中，这就是为啥每个observer对象得 "),a("br"),e._v(" 有个dep，因为165行中的dep你是触碰不到的，但这个dep你是可以手动获取到的 "),a("br"),e._v(" 这也是$set()的核心 "),a("br")]),a("img",{attrs:{src:r("daa0"),alt:""}}),a("div",[e._v(" set就相对简单了，但是我们得分情况而定 "),a("br"),e._v(" 1. newVal 是基础类型，则会释放childOb "),a("br"),e._v(" 2. newVal 是引用类型，则会重新调用observe(),也就是重新建立响应数据 "),a("br")]),a("div",[a("strong",[e._v("打个总结：")]),a("br"),e._v(" 每个属性都有私有的dep "),a("br"),e._v(" 每个值为对象的属性存有一个__ob__: observe对象，这是为了手动触发视图更新的，observer中的dep是不会变的 "),a("br"),e._v(" 但每个属性的私有dep是会变的 ")])])}],v=r("ed08"),n=r("0632"),s={name:"init-data",components:{MainTitle:v["a"],Subtitle:n["a"]},data:function(){return{mainTitle:"简单讲讲initData",subtitle1:"推荐学习过程",subtitle2:"过程",subtitle3:"第一件事",subtitle4:"第二件事"}}},b=s,_=(r("44ed"),r("2877")),l=Object(_["a"])(b,a,i,!1,null,"44fcd146",null);t["default"]=l.exports},"520d":function(e,t,r){e.exports=r.p+"img/data_get.26f526bc.png"},"61d0":function(e,t,r){},daa0:function(e,t,r){e.exports=r.p+"img/data_set.ac15a39d.png"},ed08:function(e,t,r){"use strict";var a=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"main-title"},[r("h1",[e._v(e._s(e.mainTitle))])])},i=[],v={name:"main-view-title",props:["mainTitle"]},n=v,s=(r("100c"),r("2877")),b=Object(s["a"])(n,a,i,!1,null,"2b84df55",null);t["a"]=b.exports},fc19:function(e,t,r){e.exports=r.p+"img/data.5de7af21.png"}}]);
//# sourceMappingURL=chunk-c1fad08e.99d6eb04.js.map